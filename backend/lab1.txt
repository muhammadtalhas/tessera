CREATE TABLE IF NOT EXISTS Events (
    event_id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    date DATE,
    time TIME,
    location TEXT
);
CREATE TABLE IF NOT EXISTS Users (
    user_id INTEGER PRIMARY KEY,
    username TEXT NOT NULL UNIQUE,
    password_hash TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE
);
CREATE TABLE IF NOT EXISTS Tickets (
    ticket_id INTEGER PRIMARY KEY,
    event_id INTEGER,
    user_id INTEGER,
    purchase_date DATE,
    price REAL,
    FOREIGN KEY (event_id) REFERENCES Events(event_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);
INSERT INTO Events (name, description, date, time, location) VALUES ('SQLite4 Announcement Party', 'Because 3 versions is not enough.', '2025-04-20', '10:00', 'SQL Arena');
INSERT INTO Events (name, description, date, time, location) VALUES ('Talha Academy Kickoff Party', 'The start of Talha Academy.', '2024-05-18', '11:00', 'Reston Office');
INSERT INTO Events (name, description, date, time, location) VALUES ('Kitty''s World Tour: Acapella Edition', 'Kitty does acapella pitch perfect style.', '2024-10-03', '12:00', 'McKeldin Mall'),
																																				('Ethan''s Guitar Recital', 'Ethan debuts his new music.', '2024-06-20', '05:00', 'Flower Fields Park');

-- populating users table
INSERT INTO Users (username, password_hash, email) VALUES ('nithika.r','1234','nithikar425@gmail.com');
INSERT INTO Users (username, password_hash, email) VALUES ('kitty.s','5678','kitty.shi@gmail.com');
INSERT INTO Users (username, password_hash, email) VALUES ('ethan.k','3456','ethan.k@gmail.com');
INSERT INTO Users (username, password_hash, email) VALUES ('logan.k','6789','logan.k@gmail.com');
INSERT INTO Users (username, password_hash, email) VALUES ('talha.m','1111','talha.m@gmail.com');

-- populating tickets table
INSERT INTO Tickets (event_id, user_id, purchase_date, price) VALUES ('1', '1', '2025-06-18',111),
																																				('1', '2', '2025-06-18',200),
																																				('2', '1', '2024-01-07',50);

SELECT * FROM Events;
SELECT * FROM Users;
SELECT * FROM Tickets;


-- Homework

 -- 1. Write a Query that returns all the tickets for a specifc user
SELECT * FROM Tickets WHERE user_id = 1;

-- 2. Write a Query that returns events between certain dates
SELECT * FROM Events WHERE date > '2025-01-01';

-- 3. Write a Query that returns users who have spent more than $100.00 on tickets
SELECT * FROM Tickets WHERE price > 100;

-- 4. Get a leaderboard! In your test data, who has the most tickets?
SELECT username,  COUNT(Users.user_id) AS 'Number of Tickets Sold' FROM Users INNER JOIN Tickets ON Users.user_id = Tickets.user_id GROUP BY username ORDER BY COUNT(Users.user_id) DESC; 

/* 5. Write a single query that pulls every unique username in the 
database, and lists an aggregated value representing the total amount 
of money the user has spent on tickets*/
SELECT DISTINCT username , SUM(price) AS 'Total Price' FROM Users INNER JOIN Tickets ON Users.user_id = Tickets.user_id GROUP BY username ORDER BY COUNT(Users.user_id) DESC;
